{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AAEbC,W,GAAQ,I;;mCAECC,iB;AAEX,qCAAc;AAAA;;AAEZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CAEsB;;AAErB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAGpC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,eAHD;;AAKAR,0BAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oBAAG,CAAChB,UAAJ,EAAgB;;AAEdA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAW;AAC1B,0BAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,mBAFD;AAGD;AACCE,wBAAQL,UAAR;AAEL,eAZD;;AAcAO,0BAAYW,OAAZ,GAAsB,aAAK;;AAEzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eALD;AAMH,aA9BM,CAAP;AA+BD;;;wCAEoBtB,U,EAAY;;AAE3BH,mBAAO0B,OAAP,CAAe,iBAAS;;AAEtB,kBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACE1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEF1B,yBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAED,aAPD;AASL;;;0CAEsB7B,U,EAAY;;AAEjC,gBAAGA,UAAH,EAAe;AACbC;AACAD,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["\n\nconst stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n\n  constructor() {\n\n    throw new Error('Não é possível criar instancias de ConenctionFactory');\n  }\n\n  static getConnection() {\n\n    return new Promise((resolve, reject) => {\n\n\n        let openRequest = window.indexedDB.open(dbName,version);\n\n        openRequest.onupgradeneeded = e => { \n\n            ConnectionFactory._createStores(e.target.result);\n        };\n\n        openRequest.onsuccess = e => {\n\n            if(!connection) {\n\n              connection = e.target.result;\n              close = connection.close.bind(connection);\n              connection.close = function() {\n                  throw new Error('Você não pode fechar diretamente a conexão');\n              }\n            }\n              resolve(connection);\n\n        };\n\n        openRequest.onerror = e => {\n\n          console.log(e.target.error);\n\n          reject(e.target.error.name);\n        }\n    })\n  }\n\n  static _createStores(connection) {\n\n        stores.forEach(store => {\n\n          if (connection.objectStoreNames.contains(store))\n            connection.deleteObjectStore(store);\n\n          connection.createObjectStore(store, { autoIncrement: true })\n\n        })\n\n  }\n\n  static closeConnection(connection) {\n\n    if(connection) {\n      close();\n      connection = null;\n    }\n  }\n\n} \n\n\n"]}